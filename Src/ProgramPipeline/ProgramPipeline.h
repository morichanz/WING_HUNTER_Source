/**
* @file ProgramPipeline.h
*/
#ifndef PROGRAMPIPELINE_H_INCLUDED
#define PROGRAMPIPELINE_H_INCLUDED
#include "glad/glad.h"
#include <memory>
#include <string>

//先行宣言
class ProgramPipeline;
using ProgramPipelinePtr = std::shared_ptr<ProgramPipeline>;

/**
* プログラムパイプラインを管理するクラス
*/
class ProgramPipeline
{
public:
	//プログラムパイプラインを作成
	static ProgramPipelinePtr Create(const std::string & filenameVS, const std::string & filenameFS);
	//コンストラクタ、デストラクタ
	ProgramPipeline(const std::string & filenameVS, const std::string & filenameFS);
	~ProgramPipeline();
	
	//コピーと代入を禁止
	ProgramPipeline(const ProgramPipeline&) = delete;
	ProgramPipeline & operator=(const ProgramPipeline&) = delete;
	
	//管理番号を取得
	operator GLuint() const { return pp; }
	 GLuint GetVS() const { return vs; }
	 GLuint GetFS() const { return fs; }
	
private:
	GLuint vs = 0; //頂点シェーダ
	GLuint fs = 0; //フラグメントシェーダ
	GLuint pp = 0; //プログラムパイプライン
	std::string filenameVS; //頂点シェーダファイル名
	std::string filenameFS; //フラグメントシェーダファイル名
};
#endif //PROGRAMPIPELINE_H_INCLUDED